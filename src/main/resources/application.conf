akka {
  loggers = [akka.event.slf4j.Slf4jLogger]
  loglevel = debug
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    debug {
      receive = off
      lifecycle = off
    }
  }
  remote {
    log-remote-lifecycle-events = on
    netty.tcp {
      hostname = ${clustering.ip}
      port = ${clustering.port}

      bind-hostname = 0.0.0.0
      bind-port = ${clustering.port}
    }
  }
  cluster {
    seed-nodes = [
       "akka.tcp://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
    ]
    #auto-down-unreachable-after = 1000s

    roles = [${clustering.role}]

    downing-provider-class = "pl.immutables.akka.reasonable.downing.StaticQuorumDowningProvider"
    min-nr-of-members = ${clustering.quorum-size}

    failure-detector {
      threshold = 8
      acceptable-heartbeat-pause = 3000
      min-std-deviation = 100
      heartbeat-interval = 1000
    }
  }

  reasonable.downing {
    # the time to make a decision after the cluster is stable
    stable-after = 7 seconds

    # the N / 2 + 1 where N is number of nodes in a static cluster
    quorum-size = ${clustering.quorum-size}

    # min seed size
    min-seed-size = ${clustering.seed-size}
  }

  extensions = ["akka.cluster.client.ClusterClientReceptionist"]

  persistence {
    journal {
      #plugin = "akka.persistence.journal.leveldb"
      plugin = "akka-contrib-mongodb-persistence-journal"
    }
    snapshot-store {
      #plugin = "akka.persistence.snapshot-store.local"
      plugin = "akka-contrib-mongodb-persistence-snapshot"
    }
    fsm {
      snapshot-after = 1000
    }
  }

  contrib {
    persistence {
      mongodb {
        mongo {
          mongouri = "mongodb://journal:27017/sample"

          #Mongo Collection, Index settings
          journal-collection = "persistent_journal"
          journal-index = "journal_index"
          snaps-collection = "persistent_snapshots"
          snaps-index = "snaps_index"
          #Mongo Write Concern settings
          journal-write-concern = "Acknowledged"
          journal-wtimeout = 3s
          journal-fsync = false
          snaps-wtimeout = 3s
          snaps-fsync = false
          #Circuit breaker settings
          breaker {
            maxTries = 5
            timeout {
              call = 50s
              reset = 100s
            }
          }

        }
        #Reactive Mongo Driver - failover settings
        rxmongo {
          failover {
            initialDelay = 50ms
            retries = 3
            growth = exp
            factor = 1.5
          }
        }

        casbah {
          minpoolsize = 0
          maxpoolsize = 100
          waitqueuemultiple = 5
          serverselectiontimeout = 30seconds
          waitqueuetimeout = 2minutes
          maxidletime = 0
          maxlifetime = 0
          connecttimeout = 10seconds
          sockettimeout = 0seconds
          socketkeepalive = false
          ssl = false
          sslinvalidhostnameallowed = false
          heartbeatfrequency = 10seconds
          minheartbeatfrequency = 500ms
          heartbeatconnecttimeout = 20seconds
          heartbeatsockettimeout = 20seconds
        }
      }
    }
  }
}

clustering {
 ip = "127.0.0.1"
 ip = ${?CLUSTER_IP}
 port = 1600
 port = ${?CLUSTER_PORT}
 seed-ip = "127.0.0.1"
 seed-ip = ${?CLUSTER_IP}
 seed-ip = ${?SEED_PORT_1600_TCP_ADDR}
 seed-port = 1600
 seed-port = ${?SEED_PORT_1600_TCP_PORT}
 cluster.name = clustering-cluster
 role = seed
 role = ${?NODE_ROLE}
 quorum-size = 1
 quorum-size = ${?QUORUM_SIZE}
 seed-size = 1
 seed-size = ${?SEED_SIZE}
}

